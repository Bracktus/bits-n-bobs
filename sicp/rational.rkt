#lang racket

(define (make-rat n d) 
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))
    )
  )
  (define g (gcd n d))
  (let ((abs-n/g (abs (/ n g)))
        (abs-d/g (abs (/ d g))))
    (if (> (* n d) 0)
        (cons abs-n/g abs-d/g)
        (cons (- abs-n/g) abs-d/g)
    )
  )
)
(define (numer x) (car x)) 
(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x))
)

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x))
            )
            (* (denom x) (denom y))
  )
)

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x))
            )
            (* (denom x) (denom y))
  )
) 

(define (mult-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))
  )
)

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (numer y) (denom x))
  )
)

(define (equal-rat? x y)
  (= (* (numer x) (denom y)) 
     (* (numer y) (denom x)))
)

(define one-half (make-rat 1 -2))
(define one-third (make-rat 1 3))
(print-rat one-half)
(print-rat (add-rat one-third one-third))
